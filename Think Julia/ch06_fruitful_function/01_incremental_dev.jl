# 큰 함수를 작성하다 보면, 디버깅에 많은 시간 소요
# 복잡도가 증가하는 프로그램을 다루기 위해 점진적 개발(Incremental development)을 시도
# 점진적 개발의 목표는 한 번에 작은 분량의 코드만을 추가하고 test함으로써 디버깅이 길어지는 것을 방지

# 예를 들어 좌표가 (x1, y1)과 (x2, y2)로 주어진 두 점의 거리를 계산
# 피타고라스의 정의

# d = √(x2 - x1)^2 + (y2 - y1)^2

# 거리 함수를 어떻게 보여야 할지 구상. 입력(매개변수)와 출력(결괏값)이 무엇인지 고민
# 입력은 2개의 점이므로, 4개의 숫자로 표현 가능. 결괏값은 부동소수점 수로 표현

function distance (x1, y1, x2, y2)
  0.0
end  
  
# 결괏값은 항상 0이 나옴
# 아래 첨자는 유니코드 문자로 넣을 수 있음
# (\_1 입력 후 탭, \_2 입력 후 탭)

# 새로운 함수를 테스트하기 위해서, 샘플로 인수를 주고 호출

distance(1, 2, 4, 6)

# 가로 간격이 3이고, 세로 간격이 4가 되도록 샘플값 선택
# 그러면 3-4-5 직삼각형 모양, 피타고라스 정리에 따라 거리는 빗변의 길이인 5가 됨.

function distance(x1, y1, x2, y2)
  dx = x2 - x1
  dy = y2 - y1
  @show dx dy
  0.0
end

# 앞에서와 마찬가지로 distance(1, 2, 4, 6)를 실행하면 dx = 3과 dx = 4를 출력
# 함수가 제대로 인수를 받고, 첫 번째 계산을 옳게 했다는 것을 인지
# 가로 간격(x2 - x1)과 세로 간격 (y2 - y1)을 계산하는 것이 합리적
# 그 값들을 임시 변수에 넣고, @show 매크로를 이용해 출력하는 버전으로 계산

function distance(x1, y1, x2, y2)
  dx = x2 - x1
  dy = y2 - y1
  d^2 = dx^2 + dy^2
  @show d^2
  0.0
end

# dx와 dy를 제곱해서 더한 값을 계산
# 아래첨자와 마찬가지로 위첨자도 유니코드 문자로 넣을 수 있음 (\^2 탭)

function distance(x1, y1, x2, y2)
  dx = x2 - x1
  dy = y2 - y1
  d^2 = dx^2 + dy^2
  sqrt(d^2)
end

# distance 함수의 최종버전은 화면에 아무것도 출력하지 않음
# 결괏값만 반환함. 디버깅 시 사용했던 print 문은, 함수가 제대로 동작하는 것을 확인한 다음 제거 (스캐폴딩, 
